import puppeteer from 'puppeteer';
import dayjs from 'dayjs';
import { createTask, getResult, deleteCaptchaFile } from './captchaSolverService.js';
import { logger } from '../../logger.js';
import ParserModel from '../models/SudModel.js';
import { HEADLESS_MODE, SUD_URL } from '../config/constants.js';

const checkFor503AndReload = async (page, maxRetries = 3) => {
  for (let i = 0; i < maxRetries; i++) {
    const state503Selector = 'div.state h2';
    const element = await page.$(state503Selector);
    if (element) {
      const text = await page.evaluate(el => el.textContent, element);
      if (text && text.trim() === '503') {
        await page.reload({ waitUntil: 'networkidle2', timeout: 50000 });
        await new Promise(resolve => setTimeout(resolve, 2000));
        continue;
      }
    }
    return;
  }
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É 503 –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
};

export const sudService = async () => {
  const { SEARCH_NAME } = process.env;
  const yesterday = dayjs().subtract(1, 'day').format('DD.MM.YYYY');
  const sixMonthsAgo = dayjs().subtract(6, 'months').format('DD.MM.YYYY');
  const encodedSearchName = encodeURIComponent(SEARCH_NAME);
  const sud_address = `https://nchr7.ros.msudrf.ru/modules.php?name=sud_delo&g1_case__RESULT_DATE1D=${sixMonthsAgo}&g1_case__RESULT_DATE2D=${yesterday}&G1_PARTS__NAMESS=${encodedSearchName}&delo_id=1540005&op=sf`;

  if (!SUD_URL) throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SUD_URL –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ');
  if (!SEARCH_NAME) throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SEARCH_NAME –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ');

  let browser;
  try {
    browser = await puppeteer.launch({
      headless: HEADLESS_MODE === 'false' ? false : 'new',
      ignoreHTTPSErrors: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--ignore-certificate-errors',
        '--ignore-certificate-errors-spki-list',
        '--disable-web-security'
      ],
      defaultViewport: {
        width: 1280,
        height: 1024
      }
    });

    const page = await browser.newPage();

    await page.goto(sud_address, { waitUntil: 'networkidle2', timeout: 40000 });
    const captchaImageSelector = 'img[src="/captcha.php"]';
    await page.waitForSelector(captchaImageSelector, { visible: true });
    const captchaElement = await page.$(captchaImageSelector);

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
    const captchaImageBase64 = await captchaElement.screenshot({ encoding: 'base64' });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    const { taskId, filePath } = await createTask(captchaImageBase64);
    const captchaText = await getResult(taskId);
    // –í–≤–æ–¥–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ
    const captchaInputSelector = 'input[name="captcha-response"]';
    await page.type(captchaInputSelector, captchaText, { delay: 200 });

    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    const submitButtonSelector = 'form#kcaptchaForm button[type="submit"]';
    await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 40000 }),
      page.click(submitButtonSelector)
    ]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∫–∞–ø—á–µ–π (–ø—Ä–∏–∑–Ω–∞–∫ –æ—à–∏–±–∫–∏)
    const captchaElementAfterSubmit = await page.$(captchaImageSelector);
    if (captchaElementAfterSubmit)
      throw new Error(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ CAPTCHA. –õ–∏–±–æ –∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ª–∏–±–æ —Å–∞–π—Ç –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É'
      );

    await deleteCaptchaFile(filePath);
    await checkFor503AndReload(page);

    await page.waitForSelector('table#tablcont', { visible: true, timeout: 40000 });

    // --- –≠—Ç–∞–ø 6: –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    logger.info('–ù–∞—á–∏–Ω–∞—é —ç—Ç–∞–ø 6: –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    const scrapingResult = await page.evaluate(() => {
      const noResultsElement = document.querySelector('#search_results > p');
      if (
        noResultsElement &&
        noResultsElement.innerText.includes('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      ) {
        return { data: [] };
      }

      const table = document.querySelector('table#tablcont');
      if (!table) {
        return { data: null };
      }

      const rows = Array.from(table.querySelectorAll('tbody > tr'));

      const data = rows.map(row => {
        const getCellText = index => {
          const cell = row.querySelector(`td:nth-child(${index})`);
          return cell ? cell.innerText.trim() : '';
        };

        return {
          –ù–æ–º–µ—Ä–î–µ–ª–∞: (row.querySelector('td:nth-child(1) a') || {}).innerText?.trim() || '',
          –î–∞—Ç–∞–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: getCellText(2),
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è–ü–æ–î–µ–ª—É: getCellText(3),
          –°—É–¥—å—è: getCellText(4),
          –î–∞—Ç–∞–†–µ—à–µ–Ω–∏—è: getCellText(5),
          –†–µ—à–µ–Ω–∏–µ: getCellText(6)
        };
      });
      return { data };
    });

    const { data: scrapedData } = scrapingResult;

    logger.info('–ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞...');
    if (scrapedData === null) {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
    }

    if (scrapedData.length === 0) {
      logger.info('‚ÑπÔ∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return { status: 'success', message: '–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' };
    }

    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${scrapedData.length} –¥–µ–ª. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...`);

    const bulkOps = scrapedData.map(item => ({
      updateOne: {
        filter: { –ù–æ–º–µ—Ä–î–µ–ª–∞: item.–ù–æ–º–µ—Ä–î–µ–ª–∞ },
        update: { $set: item },
        upsert: true
      }
    }));

    const result = await ParserModel.bulkWrite(bulkOps);
    logger.info(
      `üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${result.upsertedCount} –Ω–æ–≤—ã—Ö, ${result.modifiedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö.`
    );

    return {
      status: 'success',
      message: `–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${scrapedData.length} –¥–µ–ª.`
    };
  } catch (error) {
    throw error;
  } finally {
    if (browser) {
      await browser.close();
      logger.info('–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.');
    }
  }
};
