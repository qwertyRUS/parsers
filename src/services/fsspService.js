import puppeteer from 'puppeteer';
import { logger } from '../../logger.js';
import { createTask, getResult, deleteCaptchaFile } from './captchaSolverService.js';
import FsspModel from '../models/fsspModel.js';
import { FSSP_URL, HEADLESS_MODE } from '../config/constants.js';

export const fsspService = async () => {
  const { SEARCH_NAME, BIRTHDAY } = process.env;
  const region = ' –†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å';
  if (!FSSP_URL || !SEARCH_NAME || !BIRTHDAY)
    throw new Error('FSSP_URL, SEARCH_NAME, and BIRTHDAY must be set in .env file');

  const search_name = SEARCH_NAME.split(' ');
  if (search_name.length < 2)
    throw new Error('SEARCH_NAME –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.');

  logger.info('–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –§–°–°–ü...');
  let browser;

  try {
    browser = await puppeteer.launch({
      headless: HEADLESS_MODE === 'false' ? false : 'new',
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],
      defaultViewport: { width: 1280, height: 1024 }
    });

    const page = await browser.newPage();
    logger.info(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${FSSP_URL}`);
    await page.goto(FSSP_URL, { waitUntil: 'networkidle2' });

    const individualRadioSelector = 'div.b-form__cell label.b-form__radio';
    logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –∏ –∫–ª–∏–∫ –ø–æ label "–ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–∞–º"');
    await page.waitForSelector(individualRadioSelector, { visible: true });
    await new Promise(resolve => setTimeout(resolve, 3000));
    await page.click(individualRadioSelector);

    const lastNameInputSelector = 'input[name="is[last_name]"]';
    const firstNameInputSelector = 'input[name="is[first_name]"]';
    const patronymicInputSelector = 'input[name="is[patronymic]"]';
    const dobInputSelector = 'input[name="is[date]"]';

    await page.waitForSelector(lastNameInputSelector, { visible: true });

    logger.info(`–í–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏: ${search_name[0]}`);
    await page.type(lastNameInputSelector, search_name[0]);

    logger.info(`–í–≤–æ–¥ –∏–º–µ–Ω–∏: ${search_name[1]}`);
    await page.type(firstNameInputSelector, search_name[1]);

    if (search_name.length > 2) {
      logger.info(`–í–≤–æ–¥ –æ—Ç—á–µ—Å—Ç–≤–∞: ${search_name[2]}`);
      await page.type(patronymicInputSelector, search_name[2]);
    }

    logger.info(`–í–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è: ${BIRTHDAY}`);
    await page.type(dobInputSelector, BIRTHDAY);

    const regionDropdownTriggerSelector = '#region_id_chosen';
    logger.info('–û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤');
    await page.click(regionDropdownTriggerSelector);
    const regionInputSelector = '#region_id_chosen .chosen-search-input';
    logger.info(`–í–≤–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞: "${region.trim()}"`);
    await page.type(regionInputSelector, region.trim(), { delay: 150 });
    const regionResultSelector = '#region_id_chosen li.active-result.highlighted';
    logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –∏ –∫–ª–∏–∫ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É');
    await page.waitForSelector(regionResultSelector, { visible: true });
    await page.click(regionResultSelector);

    const searchButtonSelector = '#btn-sbm';
    logger.info('–ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏"');
    await page.waitForSelector(searchButtonSelector, { visible: true });
    await page.click(searchButtonSelector);

    const captchaMaxRetries = 3;
    for (let i = 0; i < captchaMaxRetries; i++) {
      const captchaImageSelector = 'img#capchaVisualImage';
      try {
        logger.info(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${captchaMaxRetries}: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–ø—á–∏...`);
        await page.waitForSelector(captchaImageSelector, { visible: true, timeout: 15000 });
      } catch (e) {
        logger.info('–ö–∞–ø—á–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        break;
      }

      const captchaImageSrc = await page.$eval(captchaImageSelector, img => img.src);
      const base64Data = captchaImageSrc.replace(/^data:image\/png;base64,/, '');

      const { taskId, filePath } = await createTask(base64Data);
      const captchaText = await getResult(taskId);
      logger.info(`–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞: ${captchaText}`);

      const captchaInputSelector = 'input#captcha-popup-code';
      await page.type(captchaInputSelector, captchaText, { delay: 100 });

      const captchaSubmitButtonSelector = 'input#ncapcha-submit';
      await page.click(captchaSubmitButtonSelector);

      await new Promise(resolve => setTimeout(resolve, 4000));

      const isCaptchaStillVisible = await page.$(captchaImageSelector);

      if (!isCaptchaStillVisible) {
        logger.info('‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.');
        await deleteCaptchaFile(filePath);
        break;
      }

      if (i === captchaMaxRetries - 1) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É –ø–æ—Å–ª–µ ${captchaMaxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
      }
      logger.warn('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–∞–ø—á–∏, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...');
      await page.evaluate(
        selector => (document.querySelector(selector).value = ''),
        captchaInputSelector
      );
    }
    logger.info('–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    const noResultsSelector = '.results-frame .empty';
    const noResultsElement = await page.$(noResultsSelector);
    if (noResultsElement) {
      const noResultsText = await page.evaluate(el => el.innerText, noResultsElement);
      if (noResultsText.includes('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')) {
        logger.info('‚ÑπÔ∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return { status: 'success', message: '–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' };
      }
    }

    const resultsTableSelector = 'table.list';
    await page.waitForSelector(resultsTableSelector, { visible: true, timeout: 10000 });

    const scrapedData = await page.evaluate(() => {
      const rows = Array.from(document.querySelectorAll('table.list tbody tr'));
      return rows.map(row => {
        const getCellText = index => {
          const cell = row.querySelector(`td:nth-child(${index})`);
          return cell ? cell.innerText.replace(/\s\s+/g, ' ').trim() : '';
        };
        return {
          –î–æ–ª–∂–Ω–∏–∫: getCellText(1),
          –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–ù–æ–º–µ—Ä: getCellText(2),
          –†–µ–∫–≤–∏–∑–∏—Ç—ã–ò—Å–ø–î–æ–∫—É–º–µ–Ω—Ç–∞: getCellText(3),
          –î–∞—Ç–∞–ü—Ä–∏—á–∏–Ω–∞–û–∫–ò–ü: getCellText(4),
          –°—É–º–º–∞–î–æ–ª–≥–∞: getCellText(6),
          –û—Ç–¥–µ–ª–°—É–¥–ü—Ä–∏—Å—Ç: getCellText(7),
          –ü—Ä–∏—Å—Ç–∞–≤: getCellText(8)
        };
      });
    });

    if (scrapedData.length === 0) {
      logger.info('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –¥–µ–ª –≤ –Ω–µ–π –Ω–µ—Ç.');
      return { status: 'success', message: '–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' };
    }

    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${scrapedData.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...`);
    const bulkOps = scrapedData.map(item => ({
      updateOne: {
        filter: { –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–ù–æ–º–µ—Ä: item.–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–ù–æ–º–µ—Ä },
        update: { $set: item },
        upsert: true
      }
    }));
    const result = await FsspModel.bulkWrite(bulkOps);
    logger.info(
      `üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${result.upsertedCount} –Ω–æ–≤—ã—Ö, ${result.modifiedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö.`
    );

    return {
      status: 'success',
      message: `–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${scrapedData.length} –¥–µ–ª.`
    };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ fsspService: ${error.message}`);
    throw error;
  } finally {
    if (browser) {
      await browser.close();
      logger.info('–ë—Ä–∞—É–∑–µ—Ä (–§–°–°–ü) –∑–∞–∫—Ä—ã—Ç.');
    }
  }
};
